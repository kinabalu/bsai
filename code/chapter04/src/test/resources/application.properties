spring.config.import=file:../.env[.properties]

spring.ai.openai.api-key=${OPENAI_API_KEY}

# TTS
spring.ai.openai.audio.speech.options.model=tts-1
spring.ai.openai.audio.speech.options.voice=alloy
spring.ai.openai.audio.speech.options.response-format=mp3
spring.ai.openai.audio.speech.options.speed=1.0

# Transcription
spring.ai.openai.audio.transcription.options.response-format=json

#| spring.ai.openai.audio.transcription.options.prompt
#| An optional text to guide the model?s style or continue a previous audio segment. The prompt should match the audio language.
#
#| spring.ai.openai.audio.transcription.options.language
#| The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.

spring.ai.openai.audio.transcription.options.temperature=0.0
#| The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.

#| spring.ai.openai.audio.transcription.options.timestamp_granularities
#| The timestamp granularities to populate for this transcription. response_format must be set verbose_json to use timestamp granularities. Either or both of these options are supported: word, or segment. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.