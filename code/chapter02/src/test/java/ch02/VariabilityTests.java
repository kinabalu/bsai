package ch02;

import ch02.service.JaccardSimilarityCalculator;
import ch02.service.OptionChatService;
import org.apache.commons.math3.stat.regression.SimpleRegression;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.openai.OpenAiChatOptions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.stream.Stream;

import static org.apache.commons.lang3.StringUtils.*;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
public class VariabilityTests {
    private final Logger log = LoggerFactory.getLogger(this.getClass());
    @Autowired
    JaccardSimilarityCalculator calculator;
    @Autowired
    OptionChatService optionChatService;

    String query = "Write a story about a salamander learning to fly.";

    public static Stream<Arguments> controlParameters() {
        return Stream.of(
                Arguments.of(true, 0.0f, 2.0f),
                Arguments.of(false, 0.01f, 0.3f)
        );
    }

    @ParameterizedTest
    @MethodSource("controlParameters")
    void testTemperatures(boolean temp, float lower, float upper) {
        var results = new ArrayList<String>();
        var regression = new SimpleRegression();
        // we're going to reuse the same options instance, but change its parameters.
        var options = OpenAiChatOptions.builder().build();
        for (float value = lower; value < upper; value += (upper - lower) / 7) {
            if (temp) {
                options.setTemperature(value);
            } else {
                options.setTopP(value);
            }
            var result=optionChatService.query(query, options);
            /*
            If you'd like to see what's generated by the AI,
            uncomment the following line. Be prepared for a lot of
            content, though.
             */
            // System.out.println(result);
            results.add(result);
        }
        for (int i = 1; i < results.size(); i++) {
            var c = calculator.calculateJaccardSimilarity(
                    results.getFirst(),
                    results.get(i),
                    2);
            log.info("{}: {}", graph(c), c);
            regression.addData(i, c);
        }

        var slope = regression.getSlope();
        // slope should be negative to indicate less similarity...
        // although top_p is less predictable here
        log.info("Slope: {}", slope);
        assertTrue(slope < (temp ? 0.0 : 0.05));
    }

    private String graph(double c) {
        return rightPad(repeat("*", (int) (c * 20)), 22, " ");
    }
}
